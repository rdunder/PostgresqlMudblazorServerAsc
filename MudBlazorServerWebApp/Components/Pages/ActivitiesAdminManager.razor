@page "/manage/activities"

@rendermode InteractiveServer

@using MudBlazorServerWebApp.Data
@using MudBlazorServerWebApp.Components.Pages.Shared
@using System
@using Microsoft.AspNetCore.Authorization

@inject PlannedActivitiesManager ActivityManager
@inject NavigationManager NavigationManager

@attribute [Authorize(Roles = "admin")]

<h3>Add Activities</h3>

<MudGrid>

	<MudItem xs="12" Class="d-flex mud-width-full py-8 justify-content-center">
		<MudText Typo="Typo.h6">Manage Activities</MudText>
	</MudItem>

	<MudItem xs="6">
		<MudCard Class="mt-5">
			<MudForm Model="@model" OnValidSubmit="OnValidSubmit">
				<MudCardContent>
					<MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="model.DateTime" Label="Date" ReadOnly="false" />
					<MudTextField T="string" Label="Multiline" Variant="Variant.Text" @bind-Value="model.Activity" Lines="3" />
				</MudCardContent>
				<MudCardActions>
					<MudButton OnClick="() => OnValidSubmit()" Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.AddCircleOutline">
						Add
					</MudButton>
				</MudCardActions>
			</MudForm>
		</MudCard>
	</MudItem>

	<MudItem xs="6"></MudItem>

	<MudItem xs="12">
		<MudDataGrid T="PlannedActivity" Items="@activities" Height="500px">
			<Columns>
				<PropertyColumn Property='x => x.DateTime.GetValueOrDefault().ToString("MMMM, dd")' Title="Date" SortBy="@_sortBy" />
				<PropertyColumn Property="x => x.Activity" />
				<TemplateColumn CellClass="d-flex justify-end">
					<CellTemplate>
						<MudIconButton OnClick="() => DeleteActivity(context.Item)" Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"></MudIconButton>
					</CellTemplate>
				</TemplateColumn>
			</Columns>
		</MudDataGrid>
	</MudItem>

</MudGrid>

@code {
	PlannedActivity? selectedItem;
	List<PlannedActivity> activities = new();
	InputModel model = new();
	PlannedActivity activity = new();

	protected override void OnInitialized()
	{
		activities = ActivityManager.GetAllPlannedActivities();
	}

	void OnValidSubmit()
	{
		activity.DateTime = model.DateTime;
		activity.Activity = model.Activity;

		ActivityManager.AddActivity(activity);

		NavigationManager.NavigateTo("manage/activities", true);
	}

	void DeleteActivity(PlannedActivity activity)
	{
		ActivityManager.DeletActivity(activity);
		NavigationManager.NavigateTo("manage/activities", true);
	}


	private Func<PlannedActivity, object> _sortBy => s =>
	{
		return s.DateTime.GetValueOrDefault();
	};


	class InputModel
	{
		public int Id { get; set; }
		public DateTime? DateTime { get; set; }
		public string? Activity { get; set; }
	}
}