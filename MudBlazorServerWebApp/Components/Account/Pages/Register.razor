@page "/Account/Users"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazorServerWebApp.Data
@using Microsoft.AspNetCore.Authorization
@using PasswordGenerator

@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

@attribute [Authorize(Roles ="admin")]

@* Register User *@
<div class="row mt-8 mb-8">
    <div class="col-md-4 mb-15">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />

            <h5>Register new user</h5>
            <hr />
            
            <ValidationSummary class="text-danger" role="alert" />

            @*  EMAIL Input *@
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            @*  Name Input  *@
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="username" aria-required="true" placeholder="First Name"  />
                <label for="email">First Name</label>
                <ValidationMessage For="() => Input.FirstName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="username" aria-required="true" placeholder="Last Name"  />
                <label for="email">Last Name</label>
                <ValidationMessage For="() => Input.LastName" class="text-danger" />
            </div>

            @*  Role Bool   *@
            <div class="mb-3">
                
                <label>
                    Make Admin
                    <InputCheckbox @bind-Value="Input.IsAdmin" />
                </label>
            </div>
            
            @*Password is generated by random, see -> GenerateRandomPassword()*@
            @*  Password Input *@
            @* <div class="form-floating mb-3" style="display: none" >
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3" style="display: none">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div> *@
            
           
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
    <div class="col-sm-1"></div>
    <div class="col-md-6 col-md-offset-2 ">

        <h5>Manage users</h5>
        <hr />

        <UsersDatagrid />
    </div>
</div>


@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    string? password;

    public async Task RegisterUser(EditContext editContext)
    {
        password = GenerateRandomPassword();

        var user = CreateUser();

        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        if (Input.IsAdmin)
        {
            user.IsAdmin = true;
        }
        
        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        //var result = await UserManager.CreateAsync(user, Input.Password);
        var result = await UserManager.CreateAsync(user, password);


        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }        

        Logger.LogInformation("User created a new account with password.");

        if (Input.IsAdmin)
        {
            var addRoleResult = await UserManager.AddToRoleAsync(user, "admin");

            if (!addRoleResult.Succeeded)
            {
                Logger.LogInformation("adding admin role failed, the checkbox was set to: " + Input.IsAdmin);
            }
            else
            {
                Logger.LogInformation("Adding admin role was successful");
            }
        }


        //  Send account comfirmation email
        // var userId = await UserManager.GetUserIdAsync(user);
        // var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        // code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        // var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //     NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //     new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        // await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));




        // //  Send Link to reset password
        // // For more information on how to enable account confirmation and password reset please
        // // visit https://go.microsoft.com/fwlink/?LinkID=532713
        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ResetPassword").AbsoluteUri,
            new Dictionary<string, object?> { ["code"] = code });

        await EmailSender.SendPasswordResetLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));




        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private string GenerateRandomPassword()
    {
        PasswordSettings options = new PasswordSettings(
            true,   //includeLowercase
            true,   //includeUppercase
            true,   //includeNumeric
            true,   //includeSpecial
            10,     //passwordLenght
            256,    //maximumAttempt
            true    //usingDefaults
        );

        Password password = new Password(options);

        return password.Next();
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        // [Required]
        // [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        // [DataType(DataType.Password)]
        // [Display(Name = "Password")]
        // public string Password { get; set; }

        // [DataType(DataType.Password)]
        // [Display(Name = "Confirm password")]
        // [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        // public string ConfirmPassword { get; set; }

        public bool IsAdmin { get; set; }
    }
}
