@rendermode InteractiveServer


@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using MudBlazorServerWebApp.Data
@using Microsoft.AspNetCore.Authorization


@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar

<MudSnackbarProvider />



@* Manage Users *@
<div>
    <MudDataGrid    T="ApplicationUser" Items="@users"
                    SortMode="SortMode.Multiple" QuickFilter="@_quickFilter"
                    Hideable="true" RowClick="@RowClicked" Height="500px"
                    RowContextMenuClick="RowRightClicked" FixedHeader="true">

        <ToolBarContent>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" 
                            Adornment="Adornment.Start" Immediate="true"
                            AdornmentIcon="@Icons.Material.Filled.Search" 
                            IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>

        <Columns>
            <HierarchyColumn T="ApplicationUser" ButtonDisabledFunc="@(x => x.FirstName == "He")" />
            <PropertyColumn Property="x => x.FirstName" />
            <PropertyColumn Property="x => x.LastName" />
        </Columns>

        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.FirstName @context.Item.LastName </MudText>
                            @if (context.Item.IsAdmin)
                            {
                                <MudText>Admin</MudText>
                            }
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudText>E-mail:    <a href="mailto:@context.Item.Email">@context.Item.Email</a> </MudText>
                    <MudText>Phone:     @context.Item.PhoneNumber</MudText>
                   
                </MudCardContent>
                
                    <MudCardActions Class="mt-5 justify-content-evenly">

                        <AuthorizeView Context="authContext" Roles="admin">

                            @if (context.Item.Email != "r.dunder@gmail.com" && context.Item.UserName != authContext.User.Identity?.Name)
                            {
                                <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.Delete"
                                           Color="Color.Error" OnClick="() => DeleteUserAsync(context.Item)">
                                    Delete user
                                </MudButton>

                                <MudDivider Vertical="true" FlexItem="true" />

                           
                                @if (context.Item.IsAdmin)
                                {
                                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonOff"
                                                Color="Color.Primary" OnClick="() => ChangeAdminStatus(context.Item, context.Item.IsAdmin)">
                                        Remove Admin Role
                                    </MudButton>

                                }
                                else
                                {
                                    <MudButton Variant="Variant.Text" StartIcon="@Icons.Material.Outlined.PersonOutline"
                                                Color="Color.Primary" OnClick="() => ChangeAdminStatus(context.Item, context.Item.IsAdmin)">
                                        Add Admin Role
                                    </MudButton>
                                }

                            }

                        </AuthorizeView>

                    </MudCardActions>
                
            </MudCard>            
        </ChildRowContent>

    </MudDataGrid>

   

    

</div>

@code {

    // User management

    List<ApplicationUser> users = new();
    string? searchString;

    ApplicationUser clickedUser = new();
    bool showClickedUserDetails = false;
    int rowIndexClicked;

    protected override async Task OnInitializedAsync()
    {
        users = UserManager.Users.ToList();    
    }

    private Func<ApplicationUser, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (x.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if ($"{x.Email}".Contains(searchString))
            return true;

        return false;
    };

    async Task DeleteUserAsync(ApplicationUser user)
    {
        string userName = $"{user.FirstName} {user.LastName}";
        string userEmail = user.Email;

        Snackbar sb;        

        var isUserDeleted = await UserManager.DeleteAsync(user);

        if (isUserDeleted.Succeeded)
        {
            sb = Snackbar.Add($"User: {userName} is deleted", Severity.Normal);
            users.RemoveAll(s => s.Email == userEmail);
        }
    }

    async Task ChangeAdminStatus(ApplicationUser user, bool isAdmin)
    {
        IdentityResult adminStatusChangeResult;
        string userName = $"{user.FirstName} {user.LastName}";

        Snackbar sb;

        if (isAdmin)
        {
            adminStatusChangeResult = await UserManager.RemoveFromRoleAsync(user, "admin");
            user.IsAdmin = false;
            await UserManager.UpdateAsync(user);
        }
        else
        {
            adminStatusChangeResult = await UserManager.AddToRoleAsync(user, "admin");
            user.IsAdmin = true;
            await UserManager.UpdateAsync(user);
        }


        if (adminStatusChangeResult.Succeeded)
        {
            sb = Snackbar.Add($"Admin status of user {userName} was changed", Severity.Normal);
        }
        else
        {
            sb = Snackbar.Add("Admin status change did not work");
        }
    }


    void RowClicked(DataGridRowClickEventArgs<ApplicationUser> args)
    {
        
    }

    void RowRightClicked(DataGridRowClickEventArgs<ApplicationUser> args)
    {
    }

}

